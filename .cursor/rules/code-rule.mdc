---
globs: *.tsx,*.ts
alwaysApply: false
---

# Prism Code Agent 项目规范

## 📁 目录结构规范

### 核心目录说明

- `app/` - Next.js 应用层，包含页面、API 路由和组件
  - `components/` - React 组件，按功能模块组织 **(遵循领域驱动设计)**
    - `{feature}/` - 功能模块组件 **(按业务领域分组)**
    - `ui/` - 通用可复用 UI 组件 **(无业务逻辑的纯 UI 组件)**
  - `api/` - API 路由处理器
  - `pages/` - 页面级组件和路由
- `lib/` - 核心业务逻辑库，包含可复用的服务和工具
- `hooks/` - 自定义 React Hooks，分离业务逻辑 **(逻辑层)**
- `config/` - 配置文件，如数据库连接、API 配置等
- `types/` - 全局 TypeScript 类型定义
- `docs/` - 项目文档
- `public/` - 静态资源文件

### Agent 服务架构 (lib/services/agent/)

- `core/` - 核心实现
  - `agent.ts` - 主要 Agent 类
  - `agent-loop.ts` - Agent 执行循环
  - `claude-client.ts` - Claude API 客户端
- `tools/` - 工具实现层
  - 每个工具一个文件，如 `file-edit.ts`, `code-analyzer.ts`
  - `base-tool.ts` - 基础工具抽象类
  - `tool-registry.ts` - 工具注册管理
  - `tool-factory.ts` - 工具工厂
- `types/` - Agent 相关类型定义
- `utils/` - 工具函数
- `monitoring/` - 监控和性能追踪

## 🏗️ 文件拆分策略

### 📦 Hooks 拆分原则 (hooks/)

按功能领域组织，提供可复用的业务逻辑：

```
hooks/
├── index.ts                    # 统一导出 (Barrel Export)
├── use-{feature}.ts           # 功能主逻辑集成
├── use-{feature}-state.ts     # 功能状态管理
├── use-{feature}-effects.ts   # 功能副作用处理
├── use-{feature}-operations.ts # 功能操作逻辑
├── use-{common-behavior}.ts   # 通用行为hooks
└── use-{utility}.ts           # 工具类hooks
```

**拆分原则：**

- **主逻辑 Hook** (`use-{feature}.ts`): 集成多个子 hooks，提供统一接口
- **状态管理 Hook** (`use-{feature}-state.ts`): 专注状态管理和数据流
- **副作用 Hook** (`use-{feature}-effects.ts`): 处理 API 调用、事件监听等
- **操作 Hook** (`use-{feature}-operations.ts`): 业务操作逻辑（增删改查等）
- **通用 Hook**: 可跨功能模块复用的行为模式
- **工具 Hook**: 纯工具类功能，无业务逻辑

**命名规范：**

- 主功能：`useFeatureName` (如 `useUserManagement`)
- 子功能：`useFeatureName + 具体职责` (如 `useUserManagementState`)
- 通用行为：`use + 行为描述` (如 `useApiHealth`, `useScrollToBottom`)

### 🧩 组件拆分策略 (app/components/)

#### 三层组件架构

```
┌─────────────────────────────────────────────────────────────┐
│                    📱 Container Layer                       │
│            (业务逻辑 + 状态管理 + Hook集成)                    │
│         {Feature}Manager, {Feature}Interface               │
└─────────────────────────────────────────────────────────────┘
           ↓ props + handlers ↓
┌─────────────────────────────────────────────────────────────┐
│                   🧩 Feature Layer                         │
│              (功能特定UI + 交互逻辑)                          │
│     {Feature}Item, {Feature}Form, {Feature}Display        │
└─────────────────────────────────────────────────────────────┘
           ↓ common patterns ↓
┌─────────────────────────────────────────────────────────────┐
│                    🎨 UI Layer                              │
│                (纯UI组件 + 无业务逻辑)                         │
│     Button, Modal, Input, Message, Loading                │
└─────────────────────────────────────────────────────────────┘
```

#### 功能模块组件结构

```
app/components/{feature}/        # 功能模块目录
├── {feature}-manager.tsx        # 🏗️ 容器组件 - 主入口
├── {feature}-list.tsx          # 🧩 功能组件 - 列表展示
├── {feature}-item.tsx          # 🧩 功能组件 - 单项展示
├── {feature}-form.tsx          # 🧩 功能组件 - 表单操作
├── {feature}-header.tsx        # 🧩 功能组件 - 头部信息
├── {feature}-footer.tsx        # 🧩 功能组件 - 底部信息
├── {feature}-empty-state.tsx   # 🧩 功能组件 - 空状态
└── index.ts                    # 📦 模块导出
```

#### 通用 UI 组件结构

```
app/components/ui/              # 通用UI组件目录
├── button.tsx                 # 🎨 按钮组件
├── input.tsx                  # 🎨 输入组件
├── modal.tsx                  # 🎨 弹窗组件
├── message.tsx                # 🎨 消息组件
├── loading.tsx                # 🎨 加载组件
├── error-display.tsx          # 🎨 错误显示
├── status-message.tsx         # 🎨 状态消息
└── index.ts                   # 📦 通用组件导出
```

### 📂 文件放置规则

#### 🎣 Hooks 文件放置

```typescript
// ✅ 正确放置
hooks / use - user - management.ts; // 用户管理主逻辑
hooks / use - user - management - state.ts; // 用户状态管理
hooks / use - user - management - operations.ts; // 用户操作逻辑
hooks / use - api - health.ts; // 通用API健康检查
hooks / use - scroll - to - bottom.ts; // 通用滚动行为

// ❌ 错误放置 - 不要放在组件目录下
app / components / user / use - user - logic.ts;
```

#### 🧩 组件文件放置

```typescript
// ✅ 功能组件 - 放在对应功能模块下
app/components/user-management/
  ├── user-management-interface.tsx   // 容器组件
  ├── user-list.tsx                  // 用户列表
  ├── user-item.tsx                  // 用户条目
  ├── user-form.tsx                  // 用户表单
  └── index.ts

// ✅ 通用UI组件 - 放在ui目录下
app/components/ui/
  ├── data-table.tsx                 // 通用数据表格
  ├── form-input.tsx                 # 通用表单输入
  ├── status-badge.tsx               # 通用状态徽章
  └── index.ts

// ❌ 错误放置 - 业务组件不要放在ui目录
app/components/ui/user-profile.tsx  # 用户资料组件应该放在user模块下
```

#### 🔧 服务文件放置

```typescript
// ✅ 业务服务 - 放在lib/services下
lib / services / user - service.ts; // 用户业务服务
lib / services / data - service.ts; // 数据服务
lib / services / auth - service.ts; // 认证服务

// ✅ 工具函数 - 放在lib/utils下
lib / utils / date - formatter.ts; // 日期格式化工具
lib / utils / validation.ts; // 验证工具
lib / utils / api - client.ts; // API客户端工具
```

#### 📝 类型定义放置

```typescript
// ✅ 全局类型 - 放在types目录
types / user.ts; // 用户相关类型
types / api.ts; // API相关类型
types / common.ts; // 通用类型

// ✅ 组件专用类型 - 就近放置
app / components / user / types.ts; // 用户组件专用类型
hooks / types.ts; // Hooks专用类型
```

## 🎯 文件拆分决策指南

### 何时拆分 Hook？

```typescript
// ❌ 单一Hook过于复杂
export function useComplexFeature() {
  // 100+ 行状态管理
  // 50+ 行API调用逻辑
  // 30+ 行副作用处理
  // 这个Hook做太多事情了！
}

// ✅ 拆分为多个专门Hook
export function useFeature() {
  const state = useFeatureState();
  const operations = useFeatureOperations(state);
  const effects = useFeatureEffects(state);

  return { ...state, ...operations, ...effects };
}
```

### 何时拆分组件？

```typescript
// ❌ 单一组件过于复杂
export function ComplexComponent() {
  // 200+ 行JSX
  // 20+ 个state变量
  // 10+ 个event handler
  // 这个组件职责太多了！
}

// ✅ 拆分为容器组件 + 子组件
export function FeatureManager() {
  const logic = useFeature();
  return (
    <div>
      <FeatureHeader {...logic.headerProps} />
      <FeatureContent {...logic.contentProps} />
      <FeatureFooter {...logic.footerProps} />
    </div>
  );
}
```

### 何时创建新的功能模块？

```typescript
// ✅ 创建新功能模块的条件
- 有独立的业务领域概念 (如：用户管理、订单处理、内容管理)
- 有 3+ 个相关组件
- 有专门的数据模型和业务逻辑
- 可以独立开发和测试

// ❌ 不需要创建新模块的情况
- 只有1-2个简单组件
- 没有独立的业务逻辑
- 只是UI变化，没有数据模型
```

## 🔧 命名约定

### 📂 目录命名

```bash
# ✅ 功能模块目录 - kebab-case
app/components/user-management/
app/components/order-processing/
app/components/content-editing/

# ✅ 通用目录 - 单数名词
app/components/ui/
hooks/
types/
```

### 📄 文件命名

```bash
# ✅ 组件文件 - kebab-case
user-management-interface.tsx
order-item-card.tsx
content-editor.tsx

# ✅ Hook文件 - kebab-case
use-user-management.ts
use-api-health.ts
use-form-validation.ts

# ✅ 服务文件 - kebab-case
user-service.ts
data-service.ts
```

### 🏷️ 组件和 Hook 命名

```typescript
// ✅ 组件命名 - PascalCase
export function UserManagementInterface() {}
export function OrderItemCard() {}
export function ContentEditor() {}

// ✅ Hook命名 - camelCase with use prefix
export function useUserManagement() {}
export function useApiHealth() {}
export function useFormValidation() {}

// ✅ 类型命名 - PascalCase
interface UserData {}
type OrderStatus = "pending" | "completed";
```

## 📋 文件组织检查清单

### ✅ Hook 文件检查

- [ ] 每个 Hook 专注单一职责
- [ ] 主 Hook 不超过 150 行代码
- [ ] 复杂 Hook 已拆分为子 Hook
- [ ] 所有 Hook 都有明确的返回类型
- [ ] Hook 文件放在 `hooks/` 目录下

### ✅ 组件文件检查

- [ ] 容器组件只负责逻辑编排
- [ ] 功能组件专注特定 UI 功能
- [ ] UI 组件无业务逻辑，高度可复用
- [ ] 单个组件不超过 200 行代码
- [ ] 组件文件放在正确的目录下

### ✅ 目录结构检查

- [ ] 每个功能模块有自己的目录
- [ ] UI 组件统一放在 `ui/` 目录
- [ ] Hook 统一放在 `hooks/` 目录
- [ ] 每个模块都有 `index.ts` 导出文件
- [ ] 目录嵌套不超过 3 层

### ✅ 命名规范检查

- [ ] 目录名使用 kebab-case
- [ ] 文件名使用 kebab-case
- [ ] 组件名使用 PascalCase
- [ ] Hook 名使用 camelCase + use 前缀
- [ ] 类型名使用 PascalCase

---

_遵循这些文件拆分和组织规范，构建清晰、可维护的项目结构！_ ✨(◦'ヮ'◦)✨

# Prism Code Agent 项目规范

## 📁 目录结构规范

### 核心目录说明

- `app/` - Next.js 应用层，包含页面、API 路由和组件
  - `components/` - React 组件，按功能模块组织 **(遵循领域驱动设计)**
    - `{feature}/` - 功能模块组件 **(按业务领域分组)**
    - `ui/` - 通用可复用 UI 组件 **(无业务逻辑的纯 UI 组件)**
  - `api/` - API 路由处理器
  - `pages/` - 页面级组件和路由
- `lib/` - 核心业务逻辑库，包含可复用的服务和工具
- `hooks/` - 自定义 React Hooks，分离业务逻辑 **(逻辑层)**
- `config/` - 配置文件，如数据库连接、API 配置等
- `types/` - 全局 TypeScript 类型定义
- `docs/` - 项目文档
- `public/` - 静态资源文件

### Agent 服务架构 (lib/services/agent/)

- `core/` - 核心实现
  - `agent.ts` - 主要 Agent 类
  - `agent-loop.ts` - Agent 执行循环
  - `claude-client.ts` - Claude API 客户端
- `tools/` - 工具实现层
  - 每个工具一个文件，如 `file-edit.ts`, `code-analyzer.ts`
  - `base-tool.ts` - 基础工具抽象类
  - `tool-registry.ts` - 工具注册管理
  - `tool-factory.ts` - 工具工厂
- `types/` - Agent 相关类型定义
- `utils/` - 工具函数
- `monitoring/` - 监控和性能追踪

## 🏗️ 文件拆分策略

### 📦 Hooks 拆分原则 (hooks/)

按功能领域组织，提供可复用的业务逻辑：

```
hooks/
├── index.ts                    # 统一导出 (Barrel Export)
├── use-{feature}.ts           # 功能主逻辑集成
├── use-{feature}-state.ts     # 功能状态管理
├── use-{feature}-effects.ts   # 功能副作用处理
├── use-{feature}-operations.ts # 功能操作逻辑
├── use-{common-behavior}.ts   # 通用行为hooks
└── use-{utility}.ts           # 工具类hooks
```

**拆分原则：**

- **主逻辑 Hook** (`use-{feature}.ts`): 集成多个子 hooks，提供统一接口
- **状态管理 Hook** (`use-{feature}-state.ts`): 专注状态管理和数据流
- **副作用 Hook** (`use-{feature}-effects.ts`): 处理 API 调用、事件监听等
- **操作 Hook** (`use-{feature}-operations.ts`): 业务操作逻辑（增删改查等）
- **通用 Hook**: 可跨功能模块复用的行为模式
- **工具 Hook**: 纯工具类功能，无业务逻辑

**命名规范：**

- 主功能：`useFeatureName` (如 `useUserManagement`)
- 子功能：`useFeatureName + 具体职责` (如 `useUserManagementState`)
- 通用行为：`use + 行为描述` (如 `useApiHealth`, `useScrollToBottom`)

### 🧩 组件拆分策略 (app/components/)

#### 三层组件架构

```
┌─────────────────────────────────────────────────────────────┐
│                    📱 Container Layer                       │
│            (业务逻辑 + 状态管理 + Hook集成)                    │
│         {Feature}Manager, {Feature}Interface               │
└─────────────────────────────────────────────────────────────┘
           ↓ props + handlers ↓
┌─────────────────────────────────────────────────────────────┐
│                   🧩 Feature Layer                         │
│              (功能特定UI + 交互逻辑)                          │
│     {Feature}Item, {Feature}Form, {Feature}Display        │
└─────────────────────────────────────────────────────────────┘
           ↓ common patterns ↓
┌─────────────────────────────────────────────────────────────┐
│                    🎨 UI Layer                              │
│                (纯UI组件 + 无业务逻辑)                         │
│     Button, Modal, Input, Message, Loading                │
└─────────────────────────────────────────────────────────────┘
```

#### 功能模块组件结构

```
app/components/{feature}/        # 功能模块目录
├── {feature}-manager.tsx        # 🏗️ 容器组件 - 主入口
├── {feature}-list.tsx          # 🧩 功能组件 - 列表展示
├── {feature}-item.tsx          # 🧩 功能组件 - 单项展示
├── {feature}-form.tsx          # 🧩 功能组件 - 表单操作
├── {feature}-header.tsx        # 🧩 功能组件 - 头部信息
├── {feature}-footer.tsx        # 🧩 功能组件 - 底部信息
├── {feature}-empty-state.tsx   # 🧩 功能组件 - 空状态
└── index.ts                    # 📦 模块导出
```

#### 通用 UI 组件结构

```
app/components/ui/              # 通用UI组件目录
├── button.tsx                 # 🎨 按钮组件
├── input.tsx                  # 🎨 输入组件
├── modal.tsx                  # 🎨 弹窗组件
├── message.tsx                # 🎨 消息组件
├── loading.tsx                # 🎨 加载组件
├── error-display.tsx          # 🎨 错误显示
├── status-message.tsx         # 🎨 状态消息
└── index.ts                   # 📦 通用组件导出
```

### 📂 文件放置规则

#### 🎣 Hooks 文件放置

```typescript
// ✅ 正确放置
hooks / use - user - management.ts; // 用户管理主逻辑
hooks / use - user - management - state.ts; // 用户状态管理
hooks / use - user - management - operations.ts; // 用户操作逻辑
hooks / use - api - health.ts; // 通用API健康检查
hooks / use - scroll - to - bottom.ts; // 通用滚动行为

// ❌ 错误放置 - 不要放在组件目录下
app / components / user / use - user - logic.ts;
```

#### 🧩 组件文件放置

```typescript
// ✅ 功能组件 - 放在对应功能模块下
app/components/user-management/
  ├── user-management-interface.tsx   // 容器组件
  ├── user-list.tsx                  // 用户列表
  ├── user-item.tsx                  // 用户条目
  ├── user-form.tsx                  // 用户表单
  └── index.ts

// ✅ 通用UI组件 - 放在ui目录下
app/components/ui/
  ├── data-table.tsx                 // 通用数据表格
  ├── form-input.tsx                 # 通用表单输入
  ├── status-badge.tsx               # 通用状态徽章
  └── index.ts

// ❌ 错误放置 - 业务组件不要放在ui目录
app/components/ui/user-profile.tsx  # 用户资料组件应该放在user模块下
```

#### 🔧 服务文件放置

```typescript
// ✅ 业务服务 - 放在lib/services下
lib / services / user - service.ts; // 用户业务服务
lib / services / data - service.ts; // 数据服务
lib / services / auth - service.ts; // 认证服务

// ✅ 工具函数 - 放在lib/utils下
lib / utils / date - formatter.ts; // 日期格式化工具
lib / utils / validation.ts; // 验证工具
lib / utils / api - client.ts; // API客户端工具
```

#### 📝 类型定义放置

```typescript
// ✅ 全局类型 - 放在types目录
types / user.ts; // 用户相关类型
types / api.ts; // API相关类型
types / common.ts; // 通用类型

// ✅ 组件专用类型 - 就近放置
app / components / user / types.ts; // 用户组件专用类型
hooks / types.ts; // Hooks专用类型
```

## 🎯 文件拆分决策指南

### 何时拆分 Hook？

```typescript
// ❌ 单一Hook过于复杂
export function useComplexFeature() {
  // 100+ 行状态管理
  // 50+ 行API调用逻辑
  // 30+ 行副作用处理
  // 这个Hook做太多事情了！
}

// ✅ 拆分为多个专门Hook
export function useFeature() {
  const state = useFeatureState();
  const operations = useFeatureOperations(state);
  const effects = useFeatureEffects(state);

  return { ...state, ...operations, ...effects };
}
```

### 何时拆分组件？

```typescript
// ❌ 单一组件过于复杂
export function ComplexComponent() {
  // 200+ 行JSX
  // 20+ 个state变量
  // 10+ 个event handler
  // 这个组件职责太多了！
}

// ✅ 拆分为容器组件 + 子组件
export function FeatureManager() {
  const logic = useFeature();
  return (
    <div>
      <FeatureHeader {...logic.headerProps} />
      <FeatureContent {...logic.contentProps} />
      <FeatureFooter {...logic.footerProps} />
    </div>
  );
}
```

### 何时创建新的功能模块？

```typescript
// ✅ 创建新功能模块的条件
- 有独立的业务领域概念 (如：用户管理、订单处理、内容管理)
- 有 3+ 个相关组件
- 有专门的数据模型和业务逻辑
- 可以独立开发和测试

// ❌ 不需要创建新模块的情况
- 只有1-2个简单组件
- 没有独立的业务逻辑
- 只是UI变化，没有数据模型
```

## 🔧 命名约定

### 📂 目录命名

```bash
# ✅ 功能模块目录 - kebab-case
app/components/user-management/
app/components/order-processing/
app/components/content-editing/

# ✅ 通用目录 - 单数名词
app/components/ui/
hooks/
types/
```

### 📄 文件命名

```bash
# ✅ 组件文件 - kebab-case
user-management-interface.tsx
order-item-card.tsx
content-editor.tsx

# ✅ Hook文件 - kebab-case
use-user-management.ts
use-api-health.ts
use-form-validation.ts

# ✅ 服务文件 - kebab-case
user-service.ts
data-service.ts
```

### 🏷️ 组件和 Hook 命名

```typescript
// ✅ 组件命名 - PascalCase
export function UserManagementInterface() {}
export function OrderItemCard() {}
export function ContentEditor() {}

// ✅ Hook命名 - camelCase with use prefix
export function useUserManagement() {}
export function useApiHealth() {}
export function useFormValidation() {}

// ✅ 类型命名 - PascalCase
interface UserData {}
type OrderStatus = "pending" | "completed";
```

## 📋 文件组织检查清单

### ✅ Hook 文件检查

- [ ] 每个 Hook 专注单一职责
- [ ] 主 Hook 不超过 150 行代码
- [ ] 复杂 Hook 已拆分为子 Hook
- [ ] 所有 Hook 都有明确的返回类型
- [ ] Hook 文件放在 `hooks/` 目录下

### ✅ 组件文件检查

- [ ] 容器组件只负责逻辑编排
- [ ] 功能组件专注特定 UI 功能
- [ ] UI 组件无业务逻辑，高度可复用
- [ ] 单个组件不超过 200 行代码
- [ ] 组件文件放在正确的目录下

### ✅ 目录结构检查

- [ ] 每个功能模块有自己的目录
- [ ] UI 组件统一放在 `ui/` 目录
- [ ] Hook 统一放在 `hooks/` 目录
- [ ] 每个模块都有 `index.ts` 导出文件
- [ ] 目录嵌套不超过 3 层

### ✅ 命名规范检查

- [ ] 目录名使用 kebab-case
- [ ] 文件名使用 kebab-case
- [ ] 组件名使用 PascalCase
- [ ] Hook 名使用 camelCase + use 前缀
- [ ] 类型名使用 PascalCase

---

_遵循这些文件拆分和组织规范，构建清晰、可维护的项目结构！_ ✨(◦'ヮ'◦)✨
